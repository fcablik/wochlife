// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model CarBrand {
  id              String          @id @default(cuid())
  url             String          @unique
  title           String
  description     String
  countryOfOrigin String
  logoIcon        String?
  seo             String?
  visibility      Boolean         @default(false)
  images          CarBrandImage[]
  carModels       CarModel[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model CarBrandImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carBrand   CarBrand @relation(fields: [carBrandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carBrandId String

  // non-unique foreign key
  @@index([carBrandId])
}

model CarModel {
  id                    String                  @id @default(cuid())
  url                   String                  @unique
  title                 String
  visibility            Boolean                 @default(false)
  year                  Int
  description           String?
  seo                   String?
  videoLinks            String?
  carModelFacility      CarModelFacility[]
  carModelGalleryImages CarModelsGalleryImage[] @relation("galleryImages")
  carModelPreviewImages CarModelsGalleryImage[] @relation("previewImages")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  carBrand              CarBrand                @relation(fields: [carBrandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carBrandId            String

  // non-unique foreign key
  @@index([carBrandId])
  // This helps our order by in the user search a LOT
  @@index([carBrandId, updatedAt])
}

model CarModelsGallery {
  id     String                  @id @unique @default(cuid())
  name   String
  images CarModelsGalleryImage[]
}

model CarModelsGalleryImage {
  id                    String           @id @default(cuid())
  altText               String?
  contentType           String
  blob                  Bytes
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  carModelsGallery      CarModelsGallery @relation(fields: [carModelsGalleryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  carModelsGalleryId    String
  carModelGalleryImages CarModel[]       @relation("galleryImages")
  carModelPreviewImages CarModel[]       @relation("previewImages")

  // non-unique foreign key
  @@index([carModelsGalleryId])
}

model CarModelFacility {
  id        String     @id @unique @default(cuid())
  name      String
  iconName  String?
  carModels CarModel[]
}

model Page {
  id         String  @id @default(cuid())
  url        String  @unique
  title      String
  content    String
  seo        String?
  visibility Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images PageImage[]
  // previewImage
}

model PageImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId String

  // non-unique foreign key
  @@index([pageId])
}

model Dealer {
  id      String        @id @default(cuid())
  url     String        @unique
  name    String
  state   String
  city    String
  address String
  images  DealerImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DealerImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dealerId String

  // non-unique foreign key
  @@index([dealerId])
}
